---
format: html
editor: visual
---

---
jupyter:
  kernelspec:
    display_name: R
    language: R
    name: ir
---

# Introducción a R

R es un lenguaje de programación orientado a la estadística.

Algo parecido a SPSS o Matlab.

Es código abierto y se entrega bajo licencia GPL (versión 2 o posterior). Además existen multitud de paquetes que complementan su funcionalidad.

## Asignaciones

Podemos usar <- o el símbolo = para asignar un valor a una variable

```{r}
# se asigna 10 a la variable a
a <- 10
# se asigna 2 a la variable b
b = 2
# se asigna texto a la variable c
"texto variable" -> c
```

```{r}
# para ver las variables
print(a)
```

```{r}
# concatenar texto a una variable
# concatena vectores despues de convertirlo a caracteres
paste("El valor de a es:",a)
paste("El vector a es: ", a, "hola", sep ='---')
```

## Operaciones

### Operaciones matemáticas

```{r}
b + a    #Suma
b * a    #Multiplicación
b - a    #Resta
b / a    #División: 
a %/% b  #División entera: 
a %% b   #Módulo o resto de la división: 
a ^ b    #Potencia: 
```

### Otro tipo de operador

```{r}
3:10        #Secuencias
6 %in% 3:10 #contiene

my_sec <- 7:27
```

## Funciones básicas

Las funciones 
 * siempre acaban en ()
 * pueden recibir un número variable de parámetros
 * pueden existir parámetros por defecto

Ver las variables en memoria:

```{r}
# lista las variables que se encuentren en memoria
ls()
```

Ver el tipo de variable:

```{r}
typeof(a)
```

Para concatenar textos usamos paste(a, b, c, ...)

```{r}
paste("El valor de a es ",a)
```

# Tipos de datos

## Numérico

```{r}
# ver el tipo de variable
a <- 20
typeof(a)
# convertir a entero
b <- as.integer(a)
typeof(b)
c <- as.character(b)
typeof(c)
d <- T
typeof(d)
```

## Texto

```{r}
s1 <- " Discovery"
# ver el contenido de la variable
s1
# tipo de la variable
typeof(s1)
```

## Logical

```{r}
b1 <- TRUE
b2 <- T
b3 <- FALSE
b4 <- F
paste("El valor de b1 es",b1)
paste("El valor de b2 es",b2)
paste("El valor de b3 es",b3)
paste("El valor de b3 es",b4)
```

## Vectores

Los vectores se crean con la función c(), todos los elementos de un vector son del mismo tipo. Es decir, no se podrían mezclar caracteres y double.

En Python se llaman listas:

   ```
   a = [1,2,3,40]
   ```
   
En Java arrays:
```
   int[] a={1,2,3,40};
```   

**En R son vectores:**
Función que combina valores
```
   a = c(1,2,3,40)
```   

```{r}
# combina todos los valores y los devuelve en un objeto tipo vector
alturas<-c(1.80,1.60,1.50,1.90,1.75,1.63,1.65)
print(paste("alturas es una variable de tipo:",typeof(alturas)))
```

```{r}
alturas
```
Obtener más información de la estructura de una variable
```{r}
str(alturas)
```
```{r}
# vector tipo texto
myTxt     <- c("rojo","verde","azul")
myTxt
str(myTxt)
```

#### Acceso a elementos:

```{r}
# en R los vectores inician en 1
print(paste("El valor del tercer elemento es:",alturas[3]))
# longitud del numero de elementos
length(alturas)
# ultimo elemento del vector
alturas[length(alturas)]
# ver varios elementos de un vector, la c, genera un vector
alturas[c(1, 2, 3)]
# separar elementos con una coma se debe hacer por medio de colapse
paste(alturas[c(1, 2, 3)], collapse = ', ')
# mostrar texto más el vector separado por comas
paste("Alturas del 1 al 3: ", paste(alturas[c(1, 2, 3)], collapse = ', '))
# almacenar las tres alturas en una variable
las_3_alturas <- paste(alturas[c(1, 2, 3)], collapse = ', ')
# mostrar texto más el vector separado por comas
paste("Alturas del 1 al 3: ", las_3_alturas)
```

**¡¡En R los vectores empiezan en 1!!**

## Data Frame

Un Dataframe es una tabla como la que podemos encontrar en cualquier hoja de calculo.

![](pics/ejemplo_dataframe.png)

La información se estructura en columnas, cada columna puede ser de un tipo de variable diferente: categorica, numerica, fecha, etc..

Cada fila representa un elemento u objeto cuyos atributos están representados por las columnas.

```{r}
#Generar un dataframe
df <- data.frame(Animal=c('Perro', 'Periquito', 'Gato', 'Caballo'),
                 Cantidad=c(10,3,4,1),
                 Peso=c(30, 0.01, 2, 500))
```

```{r}
# igual que los vectores, tienen un indice de acceso
df
```

Podemos acceder a por filas y columnas:


```{r}
# Acceder a la primera fila (filas coma columna)
df[1,]
```

```{r}
# Acceder a la segunda columna (filas coma columna)
df[,2]
```

```{r}
# Acceder por nombre
df$Cantidad
```
```{r}
# Acceder por nombre
df[,'Cantidad']
```
```{r}
# Acceder por nombre en forma de columna
df['Cantidad']
```

```{r}
# Podemos buscar aquellos que pesan más de 20kg
df[df$Peso>20,]
```
```{r}
# simplemente se hace la pregunta df$Peso>20
df$Peso>20
```
```{r}
# Le digo, devuelveme el primero y el cuarto
df[c(TRUE, FALSE, FALSE, TRUE),]
```
```{r}
# Le digo, devuelveme el primero y el cuarto otra manera
df[c(1,3),]
```

```{r}
# Podemos buscar aquellos que pesan más de 20kg
df[df[,'Peso'] > 20,]
```

```{r}
# filtrar y combinar columnas
paste('Los animales que pesan más de 20kg son:', paste(df[df$Peso>20,'Animal'], collapse=','))
```
```{r}
# Devuelve un df con los datos
df[df$Peso>20,]
```
```{r}
# Devuelve los animales de la consulta
df[df$Peso>20, "Animal"]
# de otra manera
df[df$Peso>20,]$Animal
```
```{r}
# Devuelve los animales de la consulta
paste(df[df$Peso>20, "Animal"], collapse=' - ')
```
También podemos utilizar la función which() por dos motivos:
* Tiene en cuenta los NA
* Es ligeramente más rápido
```{r}
# esto me dice en cual hay true, en el 1 y el 4
which(df$Peso>20)
```
```{r}
# Maneja datos más rapidamente
df[which(df$Peso>20),]
```
```{r}
df[c(1,4),]
```
### Ejemplo: Actividad deportiva

```{r}
activities<-read.csv('data/activities_strava.csv', stringsAsFactor=T)
head(activities)
```
para saber el tamaño del fichero
```{r}
object.size(activities)
```
para saber la cantidad de filas
```{r}
nrow(activities)
```
podemos ver su estructura
```{r}
str(activities)
```
ver las columnas
```{r}
colnames(activities)
```
Nos podemos quedar con ciertas columnas de interés:

```{r}
activities <- activities[,c('Activity.Name', 'Activity.Type', 'Elapsed.Time', 'Distance')]
activities$duracion_minutos <- activities$Elapsed.Time/60
# nos enseña 6 filas
head(activities)
```
podemos ver su estructura
```{r}
str(activities)
```
ver los nombres de las columnas
```{r}
colnames(activities)
```

cambiar el nombre de las columnas
```{r}
colnames(activities) <- c('Nombre_actividad', 'Tipo_actividad', 'Duracion_segundos', 'Distancia', 'Duracion_minutos')
str(activities)
```
el rownames(activities), no se utiliza, ni las librerias lo hacen, se puede dar nombre, pero no se usa
```{r}
rownames(activities)[1] <- 'Actividad1'
# ver el nombre de la fila creado
head(activities)
```

```{r}
# Resumen de las actividades
summary(activities)
```
cuando se carga el dataframe se coloca stringsAsFactor=T, esto es para que nos cree las categorías o variables categoricas (cadenas de texto como factor), lo anterior separa los valorces por estas categorías y no combina la informacion


Podemos quedarnos solo con las actividades del tipo "Afternoon Ride" y con un tiempo inferior a 30 minutos:

```{r}
afternoon_activity <- activities[
  which(activities$Nombre_actividad=='Afternoon Ride' &
    activities$Duracion_minutos<30),]
# Visualizar los 6 primeros
head(afternoon_activity)
```

```{r}
# sumary: nos da un resumen de todas las columnas, 
# si es factor, solo nos cuenta el numero de entradas de ese valor
# si es una variable numerica, nos da ciertos estimadores estadisticos como la media, mediana y cuariles, el minimo, el maximo
# de esta manera nos hacemos una idea de como se distribuyen los valores, a diferencia de str que nos dice las estructuras que tenemos
summary(afternoon_activity)
```
podemos obtener la actividad que ha durado mas de 15 minutos y menos de 30 minutos
```{r}
afternoon_activity_30_15 <- activities[
  which(activities$Nombre_actividad=='Afternoon Ride' &
    activities$Duracion_minutos>15 & 
      activities$Duracion_minutos<30),]
# Visualizar los 6 primeros
head(afternoon_activity_30_15)
```
Podemos quedarnos solo con las actividades del tipo "Afternoon Ride" o "Morning Ride" y con un tiempo inferior a 30
minutos y superior a 15 minutos:
```{r}
afternoon_activity_30_15 <- activities[
  which((activities$Nombre_actividad=='Afternoon Ride'|
         activities$Nombre_actividad=='Morning Ride')&
    activities$Duracion_minutos>15 & 
      activities$Duracion_minutos<30),]
# Visualizar los 6 primeros
head(afternoon_activity_30_15)
```   
```{r}
summary(afternoon_activity_30_15)
```
Lo mismo:
```{r}
afternoon_activity_30_15_1 <- activities[
  which(activities$Nombre_actividad %in% c('Afternoon Ride','Morning Ride')&
    activities$Duracion_minutos>15 & 
      activities$Duracion_minutos<30),]
# Visualizar los 6 primeros
head(afternoon_activity_30_15_1)
```
```{r}
summary(afternoon_activity_30_15_1)
```